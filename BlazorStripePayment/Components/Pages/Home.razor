@page "/"
@using Stripe.Checkout

@inject NavigationManager NavigationManager


<PageTitle>Blazor Stripe Payments</PageTitle>

<h1>Stripe Payments Integration with Blazor</h1>
<hr />

<h3>Products</h3>
<ul>
    @foreach (var p in _productsInCart)
    {
        <li>
            @p.Id - @p.Name - @p.Price.ToString("C")
        </li>
    }
</ul>

<hr />
<label>Total Amount: @_productsInCart.Sum(p => p.Price).ToString("c")</label>
<hr />

<form method="post" @formname="checkout-form" @onsubmit="CheckoutAsync">
    <AntiforgeryToken />
    <button class="btn btn-sm btn-primary">Pay now</button>
</form>

@code {
    private Product[] _productsInCart = [];
    protected override void OnInitialized()
    {
        _productsInCart = [
        new Product(1, "Product 1", 555),
        new Product(2, "Product 2", 720.5m),
        new Product(3, "Product 3", 1000.23m),
        new Product(4, "Product 4", 2500.8m),
        ];
    }

    private async Task CheckoutAsync()
    {
        var domain = NavigationManager.BaseUri; // https://localhost

        var lineItems = _productsInCart.Select(p=> new SessionLineItemOptions{
            Quantity = 1,
            Price = p.Price.ToString()
        }).ToList();

            var options = new SessionCreateOptions
            {
                LineItems = lineItems,
                Mode = "payment",
                SuccessUrl = domain + "/success.html",
                CancelUrl = domain,
            };
            var service = new SessionService();
            Session session = service.Create(options);

            Response.Headers.Add("Location", session.Url);
            return new StatusCodeResult(303);
    }

    class Product
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public decimal Price { get; set; }
        public Product(int id, string name, decimal price) => (Id, Name, Price) = (id, name, price);
    }
}